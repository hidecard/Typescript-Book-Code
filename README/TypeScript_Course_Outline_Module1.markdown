# Module 1: TypeScript အကြောင်း အခြေခံမိတ်ဆက်

TypeScript ဟာ JavaScript ရဲ့ စွမ်းအားကို မြှင့်တင်ပေးတဲ့ ကိရိယာတစ်ခုဖြစ်ပြီး ဆော့ဖ်ဝဲရေးသားသူတွေအတွက် ပိုခိုင်မာပြီး ထိန်းသိမ်းရလွယ်ကူတဲ့ ကုဒ်တွေ ဖန်တီးနိုင်အောင် လုပ်ပေးပါတယ်။ ဒီသင်ခန်းစာမှာ TypeScript ရဲ့ အခြေခံသဘောတရားတွေ၊ JavaScript နဲ့ ကွဲပြားမှုတွေ၊ ပတ်ဝန်းကျင်တည်ဆောက်နည်းနဲ့ ရိုးရှင်းတဲ့ ကုဒ်တွေရေးသားပြီး JavaScript အဖြစ် ပြောင်းလဲတဲ့အဆင့်ကို လေ့လာမှာပါတယ်။ ဒီအပိုင်းဟာ စတင်သူတွေအတွက် အခြေခံအုတ်မြစ်တစ်ခု ပေးမှာပါတယ်။

## TypeScript ဆိုတာ ဘာလဲ။

TypeScript ဟာ JavaScript ရဲ့ "superset" တစ်ခုဖြစ်ပါတယ်။ ဆိုလိုတာက JavaScript ရဲ့ အင်္ဂါရပ်အားလုံးကို အသုံးပြုနိုင်ပြီး ထပ်ဆောင်းအနေနဲ့ ပိုခိုင်မာတဲ့ အမျိုးအစားစစ်ဆေးမှု (static typing) စနစ်ကို ထည့်သွင်းထားတာပါတယ်။ JavaScript မှာ ပြောင်းလဲတန်ဖိုး (variable) တစ်ခုရဲ့ အမျိုးအစားကို ကြိုတင်သတ်မှတ်ဖို့ မလိုအပ်တာကြောင့် တန်ဖိုးတစ်ခုဟာ တစ်ချိန်မှာ စာသား (string) ဖြစ်နိုင်သလို၊ နောက်တစ်ခါမှာ နံပါတ် (number) ဒါမှမဟုတ် အရာဝတ္ထု (object) အဖြစ် ပြောင်းလဲနိုင်ပါတယ်။ ဒီလိုလွတ်လပ်မှုက ရိုးရှင်းတဲ့ ပရောဂျက်တွေမှာ အဆင်ပြေပေမယ့် ကြီးမားတဲ့ ပရောဂျက်တွေမှာ အမှားတွေ ဖြစ်ပေါ်လွယ်ပါတယ်။ 

TypeScript မှာ ပြောင်းလဲတန်ဖိုးတွေရဲ့ အမျိုးအစားကို ကုဒ်ရေးနေစဉ်မှာ ကြိုတင်သတ်မှတ်ရပါတယ်။ ဥပမာ၊ ပြောင်းလဲတန်ဖိုးတစ်ခုကို စာသားအဖြစ် သတ်မှတ်ထားရင် ၎င်းမှာ နံပါတ်တစ်ခုထည့်ဖို့ ကြိုးစားရင် TypeScript က အမှားသတိပေးမှာပါတယ်။ ဒီနည်းနဲ့ ကုဒ်ရေးနေစဉ်မှာပဲ အမှားတွေကို ဖမ်းမိပြီး ပိုယုံကြည်စိတ်ချရတဲ့ ကုဒ်တွေ ဖန်တီးနိုင်ပါတယ်။ နောက်ဆုံးမှာ TypeScript ကုဒ်တွေကို JavaScript အဖြစ် ပြောင်းလဲပြီး ဘရောက်ဆာတွေ ဒါမှမဟုတ် Node.js မှာ အလုပ်လုပ်နိုင်ပါတယ်။

ဥပမာအနေနဲ့ JavaScript မှာ အောက်ပါကုဒ်ကို ကြည့်ပါ:
```javascript
let message = "Hello"; // စာသားဖြစ်ပါတယ်
message = 123; // အမှားမဖြစ်ပါဘူး၊ JavaScript က အမျိုးအစားကို ဂရုမစိုက်လို့ပါ
console.log(message); // 123
```

ဒါပေမယ့် TypeScript မှာ အောက်ပါကုဒ်ကို ရေးရင်:
```typescript
let message: string = "Hello"; // စာသားအမျိုးအစားလို့ သတ်မှတ်ထားပါတယ်
message = 123; // အမှား: Type 'number' is not assignable to type 'string'
console.log(message); // "Hello"
```

TypeScript ဟာ အမျိုးအစားမတူတဲ့ တန်ဖိုးတစ်ခုကို သတ်မှတ်ဖို့ ကြိုးစားရင် အမှားကို ချက်ချင်းပြပြီး ကုဒ်ရေးနေစဉ်မှာပဲ ပြဿနာတွေကို ဖြေရှင်းနိုင်အောင် လုပ်ပေးပါတယ်။

## Static Typing ရဲ့ အကျိုးကျေးဇူးတွေ

TypeScript ရဲ့ အဓိကအားသာချက်က static typing စနစ်ဖြစ်ပါတယ်။ ဒီစနစ်က ကုဒ်ရေးနေစဉ်မှာ အမှားတွေကို စောစီးစွာ ဖမ်းမိစေပြီး အောက်ပါအကျိုးကျေးဇူးတွေကို ပေးပါတယ်။ ပထမဦးစွာ၊ အမှားတွေ လျော့နည်းပါတယ်။ ဥပမာ၊ မမျှော်လင့်ထားတဲ့ အမျိုးအစားတစ်ခုကို အသုံးပြုမိရင် TypeScript က ချက်ချင်း သတိပေးမှာပါတယ်။ ဒုတိယအနေနဲ့၊ ကုဒ်ကို ဖတ်ရှုရာမှာ ပိုလွယ်ကူပါတယ်။ အမျိုးအစားတွေကို ကြိုတင်သတ်မှတ်ထားတာကြောင့် တခြားဆော့ဖ်ဝဲရေးသားသူတွေက ၎င်းကို ဖတ်ရှုရာမှာ ပိုနားလည်လွယ်ကူပါတယ်။ တတိယအနေနဲ့၊ Visual Studio Code လို ကုဒ်ရေးသားတဲ့ ကိရိယာတွေမှာ ပိုကောင်းတဲ့ အကူအညီတွေ ရရှိပါတယ်။ ဥပမာ၊ ကုဒ်ဖြည့်စွမ်းမှု (auto-complete)၊ အမှားစစ်ဆေးမှုနဲ့ ကုဒ်ပြန်လည်ဖွဲ့စည်းမှု (refactoring) ကိရိယာတွေဟာ TypeScript နဲ့ ပိုထိရောက်စွာ အလုပ်လုပ်ပါတယ်။ နောက်ဆုံးအနေနဲ့၊ ကြီးမားတဲ့ ပရောဂျက်တွေနဲ့ အဖွဲ့လိုက်အလုပ်လုပ်ရာမှာ TypeScript က ကုဒ်ရဲ့ ယုံကြည်စိတ်ချရမှုကို မြှင့်တင်ပေးပါတယ်။

ဥပမာအနေနဲ့ အောက်ပါကုဒ်ကို ကြည့်ပါ:
```typescript
function add(a: number, b: number): number {
  return a + b;
}
console.log(add(5, "10")); // အမှား: Argument of type 'string' is not assignable to parameter of type 'number'
```

ဒီကုဒ်မှာ `add` ဆိုတဲ့ ဖန်ရှင်က နံပါတ်နှစ်ခုကို လက်ခံရယူပြီး နံပါတ်တစ်ခုကို ပြန်ပေးဖို့ သတ်မှတ်ထားပါတယ်။ ဒါပေမယ့် စာသား ("10") ကို ဒုတိယအင်္ဂါရပ်အဖြစ် ထည့်သွင်းမိရင် TypeScript က ကုဒ်ရေးနေစဉ်မှာပဲ အမှားကို ဖမ်းမိပြီး ပြဿနာကို ကြိုတင်ဖြေရှင်းနိုင်အောင် လုပ်ပေးပါတယ်။

## TypeScript ပတ်ဝန်းကျင် တည်ဆောက်ခြင်း

TypeScript ကို စတင်အသုံးပြုဖို့ သင့်ကွန်ပျူတာမှာ အောက်ပါကိရိယာတွေကို တပ်ဆင်ဖို့ လိုအပ်ပါတယ်။ ပထမဦးစွာ Node.js ကို တပ်ဆင်ရမှာပါတယ်။ Node.js ဟာ TypeScript ကုဒ်တွေကို လုပ်ဆောင်ဖို့နဲ့ TypeScript compiler ကို တပ်ဆင်ဖို့ လိုအပ်တဲ့ ပတ်ဝန်းကျင်တစ်ခုဖြစ်ပါတယ်။ ဒုတိယအနေနဲ့ TypeScript compiler (tsc) ကို တပ်ဆင်ရမှာပါတယ်။ နောက်ဆုံးမှာ Visual Studio Code (VS Code) လို ကုဒ်ရေးသားဖို့အတွက် ကိရိယာတစ်ခုကို အသုံးပြုဖို့ အကြံပြုပါတယ်။ VS Code ဟာ TypeScript အတွက် အထူးထောက်ပံ့မှုတွေနဲ့ ကုဒ်ရေးသားမှုကို ပိုလွယ်ကူစေနိုင်ပါတယ်။

တပ်ဆင်နည်းအဆင့်တွေက အောက်ပါအတိုင်းဖြစ်ပါတယ်:
1. **Node.js တပ်ဆင်ခြင်း**: [nodejs.org](https://nodejs.org) ကနေ Node.js ကို ဒေါင်းလုဒ်လုပ်ပြီး တပ်ဆင်ပါ။ တပ်ဆင်ပြီးရင် သင့်ရဲ့ terminal ဒါမှမဟုတ် command prompt မှာ အောက်ပါ အမိန့်တွေကို ရိုက်ထည့်ပြီး စစ်ဆေးပါ:
   ```bash
   node -v
   npm -v
   ```
   ဒီအမိန့်တွေက Node.js နဲ့ npm (Node Package Manager) ရဲ့ ဗားရှင်းနံပါတ်တွေကို ပြပေးရင် တပ်ဆင်မှု အောင်မြင်ပြီဖြစ်ပါတယ်။

2. **TypeScript တပ်ဆင်ခြင်း**: Terminal မှာ အောက်ပါ အမိန့်ကို ရိုက်ထည့်ပါ:
   ```bash
   npm install -g typescript
   ```
   တပ်ဆင်ပြီးရင် TypeScript compiler အလုပ်လုပ်မလုပ်ကို စစ်ဆေးဖို့ အောက်ပါ အမိန့်ကို ရိုက်ထည့်ပါ:
   ```bash
   tsc -v
   ```
   ဗားရှင်းနံပါတ်တစ်ခု ပြပေးရင် တပ်ဆင်မှု အောင်မြင်ပြီဖြစ်ပါတယ်။

3. **Visual Studio Code တပ်ဆင်ခြင်း**: [code.visualstudio.com](https://code.visualstudio.com/) ကနေ VS Code ကို ဒေါင်းလုဒ်လုပ်ပြီး တပ်ဆင်ပါ။ VS Code ဟာ TypeScript အတွက် ကုဒ်ဖြည့်စွမ်းမှု၊ အမှားစစ်ဆေးမှုနဲ့ တခြားအကူအညီတွေကို ပေးပါတယ်။

လက်တွေ့ဥပမာအနေနဲ့ သင့်ကွန်ပျူတာမှာ `my-typescript-project` ဆိုတဲ့ ဖိုလ်ဒါတစ်ခုဖန်တီးပါ။ Terminal မှာ အောက်ပါ အမိန့်တွေကို ရိုက်ထည့်ပြီး ဖိုလ်ဒါထဲသို့ ဝင်ရောက်ပါ:
```bash
mkdir my-typescript-project
cd my-typescript-project
```

## TypeScript ကုဒ်ကို JavaScript အဖြစ် ပြောင်းလဲခြင်း

TypeScript ကုဒ်တွေကို `.ts` ဖိုင်တွေအဖြစ် ရေးသားရပြီး ၎င်းတွေကို JavaScript အဖြစ် ပြောင်းလဲဖို့ TypeScript compiler (`tsc`) ကို အသုံးပြုပါတယ်။ ဘရောက်ဆာတွေဟာ TypeScript ကုဒ်ကို တိုက်ရိုက်နားမလည်တာကြောင့် ၎င်းတွေကို JavaScript အဖြစ် ပြောင်းလဲဖို့ လိုအပ်ပါတယ်။

ဥပမာအနေနဲ့ `my-typescript-project` ဖိုလ်ဒါထဲမှာ `hello.ts` ဆိုတဲ့ ဖိုင်တစ်ခုဖန်တီးပါ။ ထိုဖိုင်ထဲမှာ အောက်ပါကုဒ်ကို ရေးသားပါ:
```typescript
let greeting: string = "Hello, TypeScript!";
console.log(greeting);
```

ဒီကုဒ်ကို JavaScript အဖြစ်ပြောင်းလဲဖို့ terminal မှာ အောက်ပါ အမိန့်ကို ရိုက်ထည့်ပါ:
```bash
tsc hello.ts
```

ဒီအမိန့်က `hello.js` ဆိုတဲ့ ဖိုင်တစ်ခုကို ဖန်တီးပေးမှာဖြစ်ပြီး ၎င်း၏အကြောင်းအရာက အောက်ပါအတိုင်းဖြစ်ပါတယ်:
```javascript
var greeting = "Hello, TypeScript!";
console.log(greeting);
```

ဒီ JavaScript ဖိုင်ကို လုပ်ဆောင်ဖို့ terminal မှာ အောက်ပါ အမိန့်ကို ရိုက်ထည့်ပါ:
```bash
node hello.js
```

ရလဒ်အနေနဲ့ console မှာ `Hello, TypeScript!` ဆိုတဲ့ စာသားကို မြင်တွေ့ရမှာပါတယ်။

## tsconfig.json ဖိုင်နဲ့ ပရောဂျက်စီမံခန့်ခွဲခြင်း

ပရောဂျက်တစ်ခုမှာ TypeScript ဖိုင်တွေ အများကြီးရှိလာတဲ့အခါ ၎င်းတွေကို တစ်ခုချင်း `tsc` အမိန့်နဲ့ ပြောင်းလဲဖို့ အဆင်မပြေတော့ပါဘူး။ `tsconfig.json` ဖိုင်က TypeScript compiler ရဲ့ လုပ်ဆောင်ပုံကို ထိန်းချုပ်ပေးပြီး ပရောဂျက်ကို ပိုစီမံခန့်ခွဲရလွယ်ကူစေနိုင်ပါတယ်။ ဒီဖိုင်မှာ compiler ရဲ့ ရွေးချယ်စရာတွေ၊ ဖိုင်တွေရဲ့ တည်နေရာနဲ့ ထွက်ရှိလာမယ့် JavaScript ဖိုင်တွေရဲ့ တည်နေရာကို သတ်မှတ်နိုင်ပါတယ်။

`tsconfig.json` ဖိုင်တစ်ခုဖန်တီးဖို့ `my-typescript-project` ဖိုလ်ဒါထဲမှာ terminal ကနေ အောက်ပါ အမိန့်ကို ရိုက်ထည့်ပါ:
```bash
tsc --init
```

ဒီအမိန့်က `tsconfig.json` ဖိုင်တစ်ခုကို ဖန်တီးပေးမှာဖြစ်ပြီး ၎င်း၏ အကြောင်းအရာက အောက်ပါပုံစံဖြစ်ပါတယ်:
```json
{
  "compilerOptions": {
    "target": "es5",
    "module": "commonjs",
    "strict": true,
    "outDir": "./dist",
    "rootDir": "./src"
  }
}
```

ဒီဖိုင်မှာ အဓိက ရွေးချယ်စရာတွေက:
- **target**: ပြောင်းလဲထွက်လာမယ့် JavaScript ရဲ့ ဗားရှင်း (ဥပမာ `es5` ဒါမှမဟုတ် `es6`)။
- **module**: အသုံးပြုမယ့် module စနစ် (ဥပမာ `commonjs` ဒါမှမဟုတ် `esmodules`)။
- **strict**: TypeScript ရဲ့ အမျိုးအစားစစ်ဆေးမှုကို တင်းကြပ်စွာ လုပ်ဆောင်ဖို့ ဖွင့်ထားမလား။
- **outDir**: ပြောင်းလဲထွက်လာတဲ့ JavaScript ဖိုင်တွေကို သိမ်းဆည်းမယ့် ဖိုလ်ဒါ။
- **rootDir**: TypeScript ဖိုင်တွေရှိတဲ့ ဖိုလ်ဒါ။

ပရောဂျက်ရဲ့ ဖိုလ်ဒါဖွဲ့စည်းပုံဟာ အောက်ပါအတိုင်း ဖြစ်နိုင်ပါတယ်:
```
my-typescript-project/
├── src/
│   └── hello.ts
├── dist/
│   └── hello.js
├── tsconfig.json
```

ဥပမာအနေနဲ့ `src` ဖိုလ်ဒါထဲမှာ `hello.ts` ဖိုင်ကို ဖန်တီးပြီး အောက်ပါကုဒ်ကို ရေးသားပါ:
```typescript
let name: string = "Mg Mg";
console.log(`Hello, ${name}!`);
```

ထို့နောက် terminal မှာ အောက်ပါ အမိန့်ကို ရိုက်ထည့်ပါ:
```bash
tsc
```

ဒီအမိန့်က `tsconfig.json` ဖိုင်ကို ဖတ်ရှုပြီး `src` ဖိုလ်ဒါထဲက `.ts` ဖိုင်တွေကို `dist` ဖိုလ်ဒါထဲမှာ `.js` ဖိုင်တွေအဖြစ် ပြောင်းလဲပေးမှာပါတယ်။ ထွက်ပေါ်လာတဲ့ `dist/hello.js` ဖိုင်ထဲမှာ အောက်ပါကုဒ်ကို တွေ့ရမှာပါတယ်:
```javascript
var name = "Mg Mg";
console.log("Hello, " + name + "!");
```

ဒီဖိုင်ကို လုပ်ဆောင်ဖို့ terminal မှာ အောက်ပါ အမိန့်ကို ရိုက်ထည့်ပါ:
```bash
node dist/hello.js
```

ရလဒ်အနေနဲ့ console မှာ `Hello, Mg Mg!` ဆိုတဲ့ စာသားကို မြင်တွေ့ရမှာပါတယ်။

## လေ့ကျင့်ခန်းတွေ

1. **TypeScript ပတ်ဝန်းကျင်တည်ဆောက်ခြင်း**  
   Node.js နဲ့ TypeScript ကို တပ်ဆင်ပြီး terminal မှာ `tsc -v` အမိန့်နဲ့ TypeScript ရဲ့ ဗားရှင်းကို စစ်ဆေးပါ�। ထို့နောက် VS Code မှာ `my-typescript-project` ဆိုတဲ့ ဖိုလ်ဒါတစ်ခုဖန်တီးပြီး ပရောဂျက်တစ်ခုကို စတင်ပါ။

2. **ရိုးရှင်းတဲ့ TypeScript ဖိုင်တစ်ခု ရေးသားခြင်း**  
   `src` ဖိုလ်ဒါထဲမှာ `greet.ts` ဆိုတဲ့ ဖိုင်တစ်ခုဖန်တီးပါ။ ထိုဖိုင်ထဲမှာ အောက်ပါကုဒ်ကို ရေးသားပြီး ပြောင်းလဲပါ:
   ```typescript
   let user: string = "Aung Aung";
   let age: number = 25;
   console.log(`Hello, ${user}! You are ${age} years old.`);
   ```
   `tsc` အမိန့်နဲ့ ဒီကုဒ်ကို ပြောင်းလဲပြီး `node dist/greet.js` အမိန့်နဲ့ ရလဒ်ကို စစ်ဆေးပါ။ ရလဒ်အနေနဲ့ console မှာ `Hello, Aung Aung! You are 25 years old.` ဆိုတဲ့ စာသားကို မြင်တွေ့ရမှာပါတယ်။

## အနှစ်ချုပ်

TypeScript ဟာ JavaScript ရဲ့ စွမ်းရည်တွေကို အခြေခံထားပြီး static typing စနစ်နဲ့ ကုဒ်တွေရဲ့ ယုံကြည်စိတ်ချရမှုကို မြှင့်တင်ပေးပါတယ်။ Node.js၊ TypeScript compiler နဲ့ Visual Studio Code ကို တပ်ဆင်ပြီးရင် ရိုးရှင်းတဲ့ ပရောဂျက်တစ်ခုကို စတင်နိုင်ပါပြီ။ `tsc` အမိန့်နဲ့ TypeScript ကုဒ်တွေကို JavaScript အဖြစ် ပြောင်းလဲနိုင်ပြီး `tsconfig.json` ဖိုင်က ပရောဂျက်ကို ပိုထိရောက်စွာ စီမံခန့်ခွဲနိုင်အောင် လုပ်ပေးပါတယ်။ ဒီအခြေခံတွေကို ကျွမ်းကျင်ပြီးရင်၊ နောက်ထပ်သင်ခန်းစာတွေမှာ TypeScript ရဲ့ အမျိုးအစားတွေ (types) နဲ့ ဖန်ရှင်တွေကို ပိုအသေးစိတ် လေ့လာနိုင်မှာပါတယ်။